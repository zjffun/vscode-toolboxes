{
  "label": "Web",
  "tools": [
    {
      "label": "TS to JS",
      "id": "ts-to-js",
      "options": [
        {
          "label": "Target",
          "name": "target",
          "description": "Set the JavaScript language version for emitted JavaScript and include compatible library declarations.",
          "type": "choice",
          "default": "ESNext",
          "choices": [
            "ES3",
            "ES5",
            "ES2015",
            "ES2016",
            "ES2017",
            "ES2018",
            "ES2019",
            "ES2020",
            "ES2021",
            "ESNext",
            "JSON",
            "Latest"
          ]
        },
        {
          "label": "JSX",
          "name": "jsx",
          "description": "Specify what JSX code is generated.",
          "type": "choice",
          "default": "React",
          "choices": [
            "None",
            "Preserve",
            "React",
            "ReactNative",
            "ReactJSX",
            "ReactJSXDev"
          ]
        },
        {
          "label": "Module",
          "name": "module",
          "description": "Specify what module code is generated.",
          "type": "choice",
          "default": "ESNext",
          "choices": [
            "None",
            "CommonJS",
            "AMD",
            "System",
            "UMD",
            "ES6",
            "ES2015",
            "ES2020",
            "es2022",
            "ESNext",
            "Node12",
            "NodeNext"
          ],
          "markdownDescription": "Specify what module code is generated.\n\nSee more: https://www.typescriptlang.org/tsconfig#module"
        }
      ],
      "cases": [
        {
          "label": "TSX",
          "content": [
            "import * as React from \"react\";",
            "",
            "export interface Props {",
            "  name: string;",
            "  priority?: boolean;",
            "}",
            "",
            "const PrintName: React.FC<Props> = props => {",
            "  return (",
            "    <div>",
            "      <p style={{ fontWeight: props.priority ? \"bold\" : \"normal\" }}>{props.name}</p>",
            "    </div>",
            "  );",
            "};",
            "",
            "const ShowUser: React.FC<Props> = props => {",
            "  return <PrintName name=\"Ned\" />;",
            "};",
            "",
            "let username = \"Cersei\";",
            "const ShowStoredUser: React.FC<Props> = props => {",
            "  return <PrintName name={username} priority />;",
            "};",
            "",
            "import { useState, useEffect } from \"react\";",
            "",
            "const CounterExample = () => {",
            "  const [count, setCount] = useState(0);",
            "",
            "  useEffect(() => {",
            "    document.title = `You clicked ${count} times`;",
            "  });",
            "",
            "  return (",
            "    <div>",
            "      <p>You clicked {count} times</p>",
            "      <button onClick={() => setCount(count + 1)}>Click me</button>",
            "    </div>",
            "  );",
            "};"
          ],
          "optionValues": {
            "target": "ESNext",
            "jsx": "React",
            "module": "ESNext"
          }
        }
      ]
    },

    {
      "label": "URL Encode",
      "id": "url-encode",
      "options": [
        {
          "name": "type",
          "label": "type",
          "type": "choice",
          "default": "encodeURIComponent",
          "description": "",
          "choices": [
            {
              "value": "encodeURIComponent",
              "description": "encodeURIComponent"
            },
            {
              "value": "encodeURI",
              "description": "encodeURI"
            }
          ]
        }
      ],
      "cases": [
        {
          "label": "URI Component",
          "content": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent",
          "optionValues": {
            "type": "encodeURIComponent"
          }
        },
        {
          "label": "URI",
          "content": "https://mozilla.org/?x=测试",
          "optionValues": {
            "type": "encodeURI"
          }
        }
      ]
    },
    {
      "label": "URL Decode",
      "id": "url-decode",
      "options": [
        {
          "name": "type",
          "label": "type",
          "type": "choice",
          "default": "decodeURIComponent",
          "description": "",
          "choices": [
            {
              "value": "decodeURIComponent",
              "description": "decodeURIComponent"
            },
            {
              "value": "decodeURI",
              "description": "decodeURI"
            }
          ]
        }
      ],
      "cases": [
        {
          "label": "URI Component",
          "content": "https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal_Objects%2FencodeURIComponent",
          "optionValues": {
            "type": "decodeURIComponent"
          }
        },
        {
          "label": "URI",
          "content": "https://mozilla.org/?x=%E6%B5%8B%E8%AF%95",
          "optionValues": {
            "type": "decodeURI"
          }
        }
      ]
    },
    {
      "label": "URL Parse",
      "id": "url-parse",
      "cases": [
        {
          "label": "case 1",
          "content": "https://developer.mozilla.org/en-US/docs/Web/API/URL?x=test-qs#test-hash"
        }
      ]
    },
    {
      "label": "HTML Encode",
      "id": "html-encode",
      "cases": [
        {
          "label": "case 1",
          "content": "<script>console.log('hello world!')</script>"
        }
      ]
    },
    {
      "label": "HTML Decode",
      "id": "html-decode",
      "cases": [
        {
          "label": "case 1",
          "content": "&lt;script&gt;console.log(&apos;hello world!&apos;)&lt;/script&gt;"
        }
      ]
    },
    {
      "label": "Base64 Encode",
      "id": "base64-encode",
      "cases": [
        {
          "label": "case 1",
          "content": "hello world"
        }
      ]
    },
    {
      "label": "Base64 Decode",
      "id": "base64-decode",
      "cases": [
        {
          "label": "case 1",
          "content": "aGVsbG8gd29ybGQ="
        }
      ]
    },
    {
      "label": "Prettier",
      "id": "prettier",
      "options": [
        {
          "label": "parser",
          "name": "parser",
          "since": "0.0.10",
          "category": "Global",
          "type": "choice",
          "description": "Which parser to use.",
          "choices": [
            {
              "value": "flow",
              "description": "Flow"
            },
            {
              "value": "babel",
              "since": "1.16.0",
              "description": "JavaScript"
            },
            {
              "value": "babel-flow",
              "since": "1.16.0",
              "description": "Flow"
            },
            {
              "value": "babel-ts",
              "since": "2.0.0",
              "description": "TypeScript"
            },
            {
              "value": "typescript",
              "since": "1.4.0",
              "description": "TypeScript"
            },
            {
              "value": "espree",
              "since": "2.2.0",
              "description": "JavaScript"
            },
            {
              "value": "meriyah",
              "since": "2.2.0",
              "description": "JavaScript"
            },
            {
              "value": "css",
              "since": "1.7.1",
              "description": "CSS"
            },
            {
              "value": "less",
              "since": "1.7.1",
              "description": "Less"
            },
            {
              "value": "scss",
              "since": "1.7.1",
              "description": "SCSS"
            },
            {
              "value": "json",
              "since": "1.5.0",
              "description": "JSON"
            },
            {
              "value": "json5",
              "since": "1.13.0",
              "description": "JSON5"
            },
            {
              "value": "json-stringify",
              "since": "1.13.0",
              "description": "JSON.stringify"
            },
            {
              "value": "graphql",
              "since": "1.5.0",
              "description": "GraphQL"
            },
            {
              "value": "markdown",
              "since": "1.8.0",
              "description": "Markdown"
            },
            {
              "value": "mdx",
              "since": "1.15.0",
              "description": "MDX"
            },
            {
              "value": "vue",
              "since": "1.10.0",
              "description": "Vue"
            },
            {
              "value": "yaml",
              "since": "1.14.0",
              "description": "YAML"
            },
            {
              "value": "glimmer",
              "since": "2.3.0",
              "description": "Ember / Handlebars"
            },
            {
              "value": "html",
              "since": "1.15.0",
              "description": "HTML"
            },
            {
              "value": "angular",
              "since": "1.15.0",
              "description": "Angular"
            },
            {
              "value": "lwc",
              "since": "1.17.0",
              "description": "Lightning Web Components"
            }
          ],
          "pluginDefaults": {},
          "cliName": "--parser"
        },
        {
          "label": "printWidth",
          "name": "printWidth",
          "since": "0.0.0",
          "category": "Global",
          "type": "int",
          "default": 80,
          "description": "The line length where Prettier will try wrap.",
          "range": {
            "start": 0,
            "end": null,
            "step": 1
          },
          "pluginDefaults": {},
          "cliName": "--print-width"
        },
        {
          "label": "tabWidth",
          "name": "tabWidth",
          "type": "int",
          "category": "Global",
          "default": 2,
          "description": "Number of spaces per indentation level.",
          "range": {
            "start": 0,
            "end": null,
            "step": 1
          },
          "pluginDefaults": {},
          "cliName": "--tab-width"
        },
        {
          "label": "useTabs",
          "name": "useTabs",
          "since": "1.0.0",
          "category": "Global",
          "type": "boolean",
          "default": false,
          "description": "Indent with tabs instead of spaces.",
          "pluginDefaults": {},
          "cliName": "--use-tabs"
        },
        {
          "label": "semi",
          "name": "semi",
          "since": "1.0.0",
          "category": "JavaScript",
          "type": "boolean",
          "default": true,
          "description": "Print semicolons.",
          "oppositeDescription": "Do not print semicolons, except at the beginning of lines which may need them.",
          "pluginDefaults": {},
          "inverted": true,
          "cliName": "--no-semi"
        },
        {
          "label": "singleQuote",
          "name": "singleQuote",
          "since": "0.0.0",
          "category": "Common",
          "type": "boolean",
          "default": false,
          "description": "Use single quotes instead of double quotes.",
          "pluginDefaults": {},
          "cliName": "--single-quote"
        },
        {
          "label": "bracketSpacing",
          "name": "bracketSpacing",
          "since": "0.0.0",
          "category": "Common",
          "type": "boolean",
          "default": true,
          "description": "Print spaces between brackets.",
          "oppositeDescription": "Do not print spaces between brackets.",
          "pluginDefaults": {},
          "inverted": true,
          "cliName": "--no-bracket-spacing"
        },
        {
          "label": "jsxSingleQuote",
          "name": "jsxSingleQuote",
          "since": "1.15.0",
          "category": "JavaScript",
          "type": "boolean",
          "default": false,
          "description": "Use single quotes in JSX.",
          "pluginDefaults": {},
          "cliName": "--jsx-single-quote"
        },
        {
          "label": "quoteProps",
          "name": "quoteProps",
          "since": "1.17.0",
          "category": "JavaScript",
          "type": "choice",
          "default": "as-needed",
          "description": "Change when properties in objects are quoted.",
          "choices": [
            {
              "value": "as-needed",
              "description": "Only add quotes around object properties where required."
            },
            {
              "value": "consistent",
              "description": "If at least one property in an object requires quotes, quote all properties."
            },
            {
              "value": "preserve",
              "description": "Respect the input use of quotes in object properties."
            }
          ],
          "pluginDefaults": {},
          "cliName": "--quote-props"
        },
        {
          "label": "arrowParens",
          "name": "arrowParens",
          "since": "1.9.0",
          "category": "JavaScript",
          "type": "choice",
          "default": "always",
          "description": "Include parentheses around a sole arrow function parameter.",
          "choices": [
            {
              "value": "always",
              "description": "Always include parens. Example: `(x) => x`"
            },
            {
              "value": "avoid",
              "description": "Omit parens when possible. Example: `x => x`"
            }
          ],
          "pluginDefaults": {},
          "cliName": "--arrow-parens"
        },
        {
          "label": "trailingComma",
          "name": "trailingComma",
          "since": "0.0.0",
          "category": "JavaScript",
          "type": "choice",
          "default": "es5",
          "description": "Print trailing commas wherever possible when multi-line.",
          "choices": [
            {
              "value": "es5",
              "description": "Trailing commas where valid in ES5 (objects, arrays, etc.)"
            },
            {
              "value": "none",
              "description": "No trailing commas."
            },
            {
              "value": "all",
              "description": "Trailing commas wherever possible (including function arguments)."
            }
          ],
          "pluginDefaults": {},
          "cliName": "--trailing-comma"
        },
        {
          "label": "proseWrap",
          "name": "proseWrap",
          "since": "1.8.2",
          "category": "Common",
          "type": "choice",
          "default": "preserve",
          "description": "How to wrap prose.",
          "choices": [
            {
              "since": "1.9.0",
              "value": "always",
              "description": "Wrap prose if it exceeds the print width."
            },
            {
              "since": "1.9.0",
              "value": "never",
              "description": "Do not wrap prose."
            },
            {
              "since": "1.9.0",
              "value": "preserve",
              "description": "Wrap prose as-is."
            }
          ],
          "pluginDefaults": {},
          "cliName": "--prose-wrap"
        },
        {
          "label": "htmlWhitespaceSensitivity",
          "name": "htmlWhitespaceSensitivity",
          "since": "1.15.0",
          "category": "HTML",
          "type": "choice",
          "default": "css",
          "description": "How to handle whitespaces in HTML.",
          "choices": [
            {
              "value": "css",
              "description": "Respect the default value of CSS display property."
            },
            {
              "value": "strict",
              "description": "Whitespaces are considered sensitive."
            },
            {
              "value": "ignore",
              "description": "Whitespaces are considered insensitive."
            }
          ],
          "pluginDefaults": {},
          "cliName": "--html-whitespace-sensitivity"
        },
        {
          "label": "insertPragma",
          "name": "insertPragma",
          "since": "1.8.0",
          "category": "Special",
          "type": "boolean",
          "default": false,
          "description": "Insert @format pragma into file's first docblock comment.",
          "pluginDefaults": {},
          "cliName": "--insert-pragma"
        },
        {
          "label": "requirePragma",
          "name": "requirePragma",
          "since": "1.7.0",
          "category": "Special",
          "type": "boolean",
          "default": false,
          "description": "Require either '@prettier' or '@format' to be present in the file's first docblock comment\nin order for it to be formatted.",
          "pluginDefaults": {},
          "cliName": "--require-pragma"
        },
        {
          "label": "vueIndentScriptAndStyle",
          "name": "vueIndentScriptAndStyle",
          "since": "1.19.0",
          "category": "HTML",
          "type": "boolean",
          "default": false,
          "description": "Indent script and style tags in Vue files.",
          "pluginDefaults": {},
          "cliName": "--vue-indent-script-and-style"
        },
        {
          "label": "embeddedLanguageFormatting",
          "name": "embeddedLanguageFormatting",
          "since": "2.1.0",
          "category": "Global",
          "type": "choice",
          "default": "auto",
          "description": "Control how Prettier formats quoted code embedded in the file.",
          "choices": [
            {
              "value": "auto",
              "description": "Format embedded code if Prettier can automatically identify it."
            },
            {
              "value": "off",
              "description": "Never automatically format embedded code."
            }
          ],
          "pluginDefaults": {},
          "cliName": "--embedded-language-formatting"
        },
        {
          "label": "bracketSameLine",
          "name": "bracketSameLine",
          "since": "2.4.0",
          "category": "Common",
          "type": "boolean",
          "default": false,
          "description": "Put > of opening tags on the last line instead of on a new line.",
          "pluginDefaults": {},
          "cliName": "--bracket-same-line"
        }
      ],
      "optionCategories": [
        "Global",
        "Common",
        "JavaScript",
        "Markdown",
        "HTML",
        "Special"
      ],
      "cases": [
        {
          "label": "JSX",
          "content": [
            "function HelloWorld({greeting = \"hello\", greeted = '\"World\"', silent = false, onMouseOver,}) {",
            "",
            "  if(!greeting){return null};",
            "",
            "     // TODO: Don't use random in render",
            "  let num = Math.floor (Math.random() * 1E+7).toString().replace(/\\.\\d+/ig, \"\")",
            "",
            "  return <div className='HelloWorld' title={`You are visitor number ${ num }`} onMouseOver={onMouseOver}>",
            "",
            "    <strong>{ greeting.slice( 0, 1 ).toUpperCase() + greeting.slice(1).toLowerCase() }</strong>",
            "    {greeting.endsWith(\",\") ? \" \" : <span style={{color: '\\grey'}}>\", \"</span> }",
            "    <em>",
            "\t{ greeted }",
            "\t</em>",
            "    { (silent)",
            "      ? \".\"",
            "      : \"!\"}",
            "",
            "    </div>;",
            "",
            "}"
          ],
          "optionValues": {
            "parser": "babel",
            "printWidth": 80,
            "tabWidth": 2,
            "useTabs": false,
            "semi": true,
            "singleQuote": false,
            "bracketSpacing": true,
            "jsxSingleQuote": false,
            "quoteProps": "as-needed",
            "arrowParens": "always",
            "trailingComma": "es5",
            "proseWrap": "preserve",
            "htmlWhitespaceSensitivity": "css",
            "insertPragma": false,
            "requirePragma": false,
            "vueIndentScriptAndStyle": false,
            "embeddedLanguageFormatting": "auto",
            "bracketSameLine": false
          }
        },
        {
          "label": "SCSS",
          "content": ".info{background:violet;border:1px solid grey;}",
          "optionValues": {
            "parser": "scss",
            "printWidth": 80,
            "tabWidth": 2,
            "useTabs": false,
            "semi": true,
            "singleQuote": false,
            "bracketSpacing": true,
            "jsxSingleQuote": false,
            "quoteProps": "as-needed",
            "arrowParens": "always",
            "trailingComma": "es5",
            "proseWrap": "preserve",
            "htmlWhitespaceSensitivity": "css",
            "insertPragma": false,
            "requirePragma": false,
            "vueIndentScriptAndStyle": false,
            "embeddedLanguageFormatting": "auto",
            "bracketSameLine": false
          }
        },
        {
          "label": "HTML",
          "content": [
            "<div><a href=\"https://prettier.io/playground\">hello</a> <span>world!</span></div>"
          ],
          "optionValues": {
            "parser": "html",
            "printWidth": 80,
            "tabWidth": 2,
            "useTabs": false,
            "semi": true,
            "singleQuote": false,
            "bracketSpacing": true,
            "jsxSingleQuote": false,
            "quoteProps": "as-needed",
            "arrowParens": "always",
            "trailingComma": "es5",
            "proseWrap": "preserve",
            "htmlWhitespaceSensitivity": "css",
            "insertPragma": false,
            "requirePragma": false,
            "vueIndentScriptAndStyle": false,
            "embeddedLanguageFormatting": "auto",
            "bracketSameLine": false
          }
        },
        {
          "label": "mdx",
          "content": [
            "# header",
            "- list item",
            "",
            "content",
            "",
            "  - list item"
          ],
          "optionValues": {
            "parser": "mdx",
            "printWidth": 80,
            "tabWidth": 2,
            "useTabs": false,
            "semi": true,
            "singleQuote": false,
            "bracketSpacing": true,
            "jsxSingleQuote": false,
            "quoteProps": "as-needed",
            "arrowParens": "always",
            "trailingComma": "es5",
            "proseWrap": "preserve",
            "htmlWhitespaceSensitivity": "css",
            "insertPragma": false,
            "requirePragma": false,
            "vueIndentScriptAndStyle": false,
            "embeddedLanguageFormatting": "auto",
            "bracketSameLine": false
          }
        },
        {
          "label": "vue",
          "content": [
            "<template>",
            "<div id=\"app-2\">",
            "<span v-bind:title=\"message\">",
            "Hover your mouse over me for a few seconds",
            "to see my dynamically bound title!",
            "</span>",
            "</div>",
            "</template>"
          ],
          "optionValues": {
            "parser": "vue",
            "printWidth": 80,
            "tabWidth": 2,
            "useTabs": false,
            "semi": true,
            "singleQuote": false,
            "bracketSpacing": true,
            "jsxSingleQuote": false,
            "quoteProps": "as-needed",
            "arrowParens": "always",
            "trailingComma": "es5",
            "proseWrap": "preserve",
            "htmlWhitespaceSensitivity": "css",
            "insertPragma": false,
            "requirePragma": false,
            "vueIndentScriptAndStyle": false,
            "embeddedLanguageFormatting": "auto",
            "bracketSameLine": false
          }
        }
      ]
    }
  ],
  "// tools": [
    {
      "label": "HTML to JSX",
      "id": "html-to-jsx",
      "cases": [
        {
          "label": "case 1",
          "content": [
            "<!DOCTYPE html>",
            "<html lang=\"en\">",
            "  <head>",
            "    <meta charset=\"UTF-8\" />",
            "    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />",
            "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />",
            "    <title>Document</title>",
            "  </head>",
            "  <body>",
            "    <div class=\"inputWrapper\">",
            "      <input id=\"input\" class=\"inputWrapper\" autocomplete=\"off\" spellcheck=\"false\" />",
            "    </div>",
            "    <script>",
            "      console.log(document.getElementById(\"input\"));",
            "    </script>",
            "  </body>",
            "</html>"
          ]
        }
      ]
    },
    {
      "label": "CSS to JS",
      "id": "css-to-js",
      "cases": [
        {
          "label": "case 1",
          "content": [
            "a:hover {",
            "  color: violet;",
            "}",
            ".box {",
            "  background: linear-gradient(",
            "        105deg,",
            "        rgba(255, 255, 255, 0.2) 39%,",
            "        rgba(51, 56, 57, 1) 96%",
            "      )",
            "      center center / 400px 200px no-repeat,",
            "    url(big-star.png) center no-repeat, rebeccapurple;",
            "}",
            ".container {",
            "  display: grid;",
            "  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));",
            "  grid-auto-rows: minmax(100px, auto);",
            "  gap: 20px;",
            "}"
          ]
        }
      ]
    }
  ]
}
